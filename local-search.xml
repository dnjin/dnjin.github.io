<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OI - Start —— OIer的好帮手</title>
    <link href="/2025/08/16/OI-Start-%E2%80%94%E2%80%94-OIer%E7%9A%84%E5%A5%BD%E5%B8%AE%E6%89%8B/"/>
    <url>/2025/08/16/OI-Start-%E2%80%94%E2%80%94-OIer%E7%9A%84%E5%A5%BD%E5%B8%AE%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Transparent-fish/OI-Start">项目地址</a></p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>为了比赛公平性，禁止在<strong>任何</strong>竞赛中使用本项目！！！</p><h2 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h2><p>你有没有苦于线段树、平衡树、图论等等各种各样的知识点记不清？OI-Start 或许可以帮助你。</p><p>OI-Start 为各位 OIer 封装了各种在 OI 中常用的数据结构、实用函数和算法，像 STL 一样开箱即用，十分方便。</p><h2 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h2><h3 id="1-珂朵莉树（ODT）"><a href="#1-珂朵莉树（ODT）" class="headerlink" title="1. 珂朵莉树（ODT）"></a>1. 珂朵莉树（ODT）</h3><p>操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ODT odt;          <span class="hljs-comment">// 定义</span><br>odt.<span class="hljs-built_in">init</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1e9</span>, <span class="hljs-number">0</span>);     <span class="hljs-comment">// 初始化区间[1,1e9]值为0 </span><br>odt.<span class="hljs-built_in">assign</span>(<span class="hljs-number">3</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// [3,50000]赋值为1</span><br><span class="hljs-comment">// 操作符：+ - * /</span><br>odt.<span class="hljs-built_in">update</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;+&#x27;</span>); <span class="hljs-comment">// [10,10000]每个数+2</span><br>odt.<span class="hljs-built_in">update</span>(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;*&#x27;</span>);    <span class="hljs-comment">// [50,200]每个数*3</span><br><span class="hljs-type">int</span> sum = odt.<span class="hljs-built_in">query</span>(<span class="hljs-number">30</span>, <span class="hljs-number">700</span>, <span class="hljs-string">&#x27;+&#x27;</span>); <span class="hljs-comment">// 返回[30,700]区间和（第三个参数支持四则运算符 + - * /）</span><br></code></pre></td></tr></table></figure><h3 id="2-线段树（Seg）"><a href="#2-线段树（Seg）" class="headerlink" title="2. 线段树（Seg）"></a>2. 线段树（Seg）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Seg&lt;大小&gt; seg;<br>seg.<span class="hljs-built_in">build</span>(建树的原数组, 建的左区间, 建的右区间, 根节点);<br>seg.<span class="hljs-built_in">update</span>(目标修改区间的左边界, 目标修改区间的右边界, 修改值, 操作类型(+ - * /), 当前节点区间左边界, 当前节点区间右边界, 当前节点存储下标);<br><span class="hljs-comment">// 当前节点区间左边界, 当前节点区间右边界, 当前节点存储下标 可不写</span><br>seg.<span class="hljs-built_in">query</span>(); <span class="hljs-comment">// 参数与 update 相同</span><br></code></pre></td></tr></table></figure><h3 id="3-FastIO"><a href="#3-FastIO" class="headerlink" title="3. FastIO"></a>3. FastIO</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a, b;<br>in &gt;&gt; a &gt;&gt; b;<br>out &lt;&lt; a + b;<br></code></pre></td></tr></table></figure><p>注意：每次读入完成后，<strong>Windows</strong> 下请 <code>Ctrl + Z</code>，<strong>Linux</strong> 下 <code>Ctrl + D</code> 手动读入 <code>EOF</code> 以结束读入！</p><h3 id="4-并查集（UF）"><a href="#4-并查集（UF）" class="headerlink" title="4. 并查集（UF）"></a>4. 并查集（UF）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">UF&lt;大小&gt; uf;<br>uf.<span class="hljs-built_in">init</span>();       <span class="hljs-comment">// 初始化</span><br>uf.<span class="hljs-built_in">merage</span>(x, y); <span class="hljs-comment">// 合并 x y 的集合</span><br>uf.<span class="hljs-built_in">query</span>(x, y);  <span class="hljs-comment">// 检查是否连通</span><br></code></pre></td></tr></table></figure><h3 id="5-实用函数库（funct）"><a href="#5-实用函数库（funct）" class="headerlink" title="5. 实用函数库（funct）"></a>5. 实用函数库（funct）</h3><p><strong>快速幂</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">funct tools;<br><span class="hljs-type">int</span> a = tools.<span class="hljs-built_in">power</span>(x, y);     <span class="hljs-comment">// a = x ^ y</span><br><span class="hljs-type">int</span> b = tools.<span class="hljs-built_in">power</span>(x, y, mod);<span class="hljs-comment">// b = x ^ y % mod</span><br></code></pre></td></tr></table></figure><p><strong>进制转换</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">funct tools;<br>string s = <span class="hljs-built_in">conversion</span>(x, n); <span class="hljs-comment">// 把十进制数n转换成x进制的数，返回字符串</span><br><span class="hljs-type">int</span> k = <span class="hljs-built_in">conversion</span>(x, s);    <span class="hljs-comment">// 把x进制的数转换为10进制的数，s是字符串</span><br></code></pre></td></tr></table></figure><p><strong>lcm</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">funct tools;<br><span class="hljs-type">int</span> a = tools.<span class="hljs-built_in">lcm</span>(x, y); <span class="hljs-comment">// 返回 x y 的 lcm 值</span><br></code></pre></td></tr></table></figure><p><strong>判断质数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">funct tools;<br><span class="hljs-type">int</span> a = tools.<span class="hljs-built_in">prime</span>(x); <span class="hljs-comment">// 如果 x 为质数，返回1，否则返回0</span><br></code></pre></td></tr></table></figure><h3 id="6-树状数组-BIT"><a href="#6-树状数组-BIT" class="headerlink" title="6. 树状数组 (BIT)"></a>6. 树状数组 (BIT)</h3><ol><li><strong>单点修改, 区间查询</strong></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">BIT&lt;大小&gt; bit;     <span class="hljs-comment">// 定义</span><br>bit.<span class="hljs-built_in">update</span>(x, k);  <span class="hljs-comment">// 将第x个数加上k</span><br><span class="hljs-type">int</span> a = bit.<span class="hljs-built_in">query</span>(x); <span class="hljs-comment">// 查询x的前缀和，即[1, x]区间的值</span><br></code></pre></td></tr></table></figure><h2 id="当前支持内容："><a href="#当前支持内容：" class="headerlink" title="当前支持内容："></a>当前支持内容：</h2><ul><li><p><strong>数据结构</strong></p><ul><li>ODT</li><li>线段树</li><li>树状数组</li><li>字典树</li></ul></li><li><p><strong>杂项</strong></p><ul><li>FastIO</li><li>实用小函数</li></ul></li></ul><h2 id="未来支持内容："><a href="#未来支持内容：" class="headerlink" title="未来支持内容："></a>未来支持内容：</h2><ul><li><p><strong>数据结构</strong></p><ul><li>图专项</li><li>普通平衡树</li><li>树链剖分</li></ul></li><li><p><strong>杂项</strong></p><ul><li>高精库</li></ul></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="如何贡献代码"><a href="#如何贡献代码" class="headerlink" title="如何贡献代码"></a>如何贡献代码</h3><p>fork 我的仓库并修改后，提交 PR 请求</p><h3 id="怎么报告问题"><a href="#怎么报告问题" class="headerlink" title="怎么报告问题"></a>怎么报告问题</h3><p>提交 <a href="https://github.com/Transparent-fish/OI-Start/issues">issues</a> 即可</p><p>欢迎各位为 OI-Start 贡献代码！</p><p><del>给孩子点个 Star 吧</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
